AWSTemplateFormatVersion: '2010-09-09'
Description: 'New API Gateway with Cognito JWT Authorizer for Lambda function integrations (PDF download and media upload)'

Parameters:
  ProjectName:
    Type: String
    Default: 'hold-that-thought'
    Description: 'Name of the project for resource naming'
  
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'

  UserPoolId:
    Type: String
    Default: ''
    Description: 'Cognito User Pool ID for JWT authorization'

Resources:
  # New API Gateway REST API for Lambda integrations
  LambdaIntegrationApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-lambda-integration-api'
      Description: 'API Gateway for PDF download and media upload Lambda functions with Cognito JWT authorization'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'multipart/form-data'
        - 'image/*'
        - 'video/*'
        - 'application/pdf'
        - 'application/octet-stream'
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'

  # Cognito JWT Authorizer using existing User Pool
  CognitoJwtAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-jwt-authorizer'
      RestApiId: !Ref LambdaIntegrationApi
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}'
      IdentitySource: method.request.header.Authorization

  # PDF Download Resource
  PdfDownloadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LambdaIntegrationApi
      ParentId: !GetAtt LambdaIntegrationApi.RootResourceId
      PathPart: 'pdf-download'

  # Media Upload Resource
  MediaUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LambdaIntegrationApi
      ParentId: !GetAtt LambdaIntegrationApi.RootResourceId
      PathPart: 'upload'

  # PDF Download GET Method (fixed !Sub usage)
  PdfDownloadGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LambdaIntegrationApi
      ResourceId: !Ref PdfDownloadResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoJwtAuthorizer
      RequestParameters:
        method.request.querystring.filename: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:631094035453:function:hold-that-thought-prod-pdf-download-lambda/invocations
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 500

  # Lambda Permission for API Gateway to invoke the PDF download Lambda
  PdfDownloadLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: arn:aws:lambda:us-west-2:631094035453:function:hold-that-thought-prod-pdf-download-lambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LambdaIntegrationApi}/*/GET/pdf-download'

  # Media Upload POST Method (update to AWS_PROXY integration)
  MediaUploadPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LambdaIntegrationApi
      ResourceId: !Ref MediaUploadResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref CognitoJwtAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:631094035453:function:hold-that-thought-prod-media-upload-lambda/invocations
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 500

  # Lambda Permission for API Gateway to invoke the media upload Lambda
  MediaUploadLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: arn:aws:lambda:us-west-2:631094035453:function:hold-that-thought-prod-media-upload-lambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LambdaIntegrationApi}/*/POST/upload'

  # Media Upload OPTIONS Method for CORS
  MediaUploadOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LambdaIntegrationApi
      ResourceId: !Ref MediaUploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PdfDownloadGetMethod
      - MediaUploadPostMethod
      - MediaUploadOptionsMethod
    Properties:
      RestApiId: !Ref LambdaIntegrationApi
      StageName: !Ref Environment

Outputs:
  ApiGatewayId:
    Description: 'Lambda Integration API Gateway ID'
    Value: !Ref LambdaIntegrationApi
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LambdaIntegrationApiId'

  ApiGatewayUrl:
    Description: 'Lambda Integration API Gateway URL'
    Value: !Sub 'https://${LambdaIntegrationApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LambdaIntegrationApiUrl'

  CognitoAuthorizerId:
    Description: 'Cognito JWT Authorizer ID for Lambda integration'
    Value: !Ref CognitoJwtAuthorizer
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LambdaIntegrationAuthorizerId'

  PdfDownloadEndpointUrl:
    Description: 'PDF Download endpoint URL'
    Value: !Sub 'https://${LambdaIntegrationApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/pdf-download'

  MediaUploadEndpointUrl:
    Description: 'Media Upload endpoint URL'
    Value: !Sub 'https://${LambdaIntegrationApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/upload'

  RestApiRootResourceId:
    Description: 'Root Resource ID for adding additional resources'
    Value: !GetAtt LambdaIntegrationApi.RootResourceId
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LambdaIntegrationApiRootResourceId'